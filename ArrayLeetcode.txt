Date-5/5/2024

Arrays

Leetcode 35.Search Insert Position(Accepted)

class Solution {
    public int searchInsert(int[] nums, int target) {
        int l=0;
        int h=nums.length-1;
        return BinarySearch(nums,0,nums.length-1,target); 
    }

    public int BinarySearch(int nums[], int l, int h, int target)
    {
        int mid=(l+h)/2;
        if(l>h)
        {
            return l;
        }
        if(nums[mid]==target)
        {
            return mid;
        }
        if(nums[mid]>target)
        {
            return BinarySearch(nums,l,mid-1,target);
        }
        else
        {
            return BinarySearch(nums,mid+1,h,target);
        }

    }
}


66.PlusOne(Accepted)

import java.util.Arrays;

class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        
        // Iterate digits in reverse order
        for (int i = n - 1; i >= 0; i--) {
            // Add one to the current digit
            digits[i]++;
            // If the digit is less than 10, no carry, so we're done
            if (digits[i] < 10) return digits;
            // Otherwise, we have a carry, set this digit to 0 and continue to the next iteration
            digits[i] = 0;
        }
        
        // If we're here, it means there's a carry in the most significant digit
        // In this case, we need to create a new array with an additional digit and set the most significant digit to 1
        int[] result = new int[n + 1];
        result[0] = 1;
        
        return result;
    }
}


136. Single Number(Accepted)

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> mp= new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!mp.containsKey(nums[i]))
                mp.put(nums[i],0);
        }
        for(int i=0;i<nums.length;i++)
        {
            int val=mp.get(nums[i]);
            mp.put(nums[i],++val);
        }
        for (Map.Entry<Integer, Integer> e : mp.entrySet())
        {
            if(e.getValue()==1)
                return e.getKey();
        }
        return 0;

        
    }
}

169. Majority Element(Accepted)

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> mp= new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!mp.containsKey(nums[i]))
                mp.put(nums[i],0);
        }
        for(int i=0;i<nums.length;i++)
        {
            int val=mp.get(nums[i]);
            mp.put(nums[i],++val);
        }
        for (Map.Entry<Integer, Integer> e : mp.entrySet())
        {
            if(e.getValue()>(nums.length/2))
                return e.getKey();
        }
        return 0;

        
    }
}

217. Contains Duplicate(Accepted)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> mp= new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(mp.containsKey(nums[i]))
                return true;
            else
                mp.put(nums[i],0);    
        }
        return false;

        
    }
}


11.Container with most water(Accepted)

class Solution {
    public int maxArea(int[] height) {
        int vol;
        int maxvol=0;
        int i=0;
        int j=height.length-1;
        while(i< height.length && j>0)
        {
            vol=Math.min(height[i],height[j])*(j-i);
            if(vol>maxvol)
            {
                maxvol=vol;
            }
            if(height[i]<height[j])
                i++;
            else
                j--;
        }
        return maxvol;
    }
}

15.3Sum(Accepted)

import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ar = new HashSet<>();
        List<List<Integer>> result = new ArrayList<>();

        Arrays.sort(nums);
        int len = nums.length;
        
        for (int i = 0; i < len - 1; i++) {
            int j = i + 1;
            int k = len - 1;
            while (j < len && k > j) {
                int sum = nums[j] + nums[k] + nums[i];
                if (sum == 0) {
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[j]);
                    list.add(nums[k]);
                    ar.add(list);
                    j++;
                    k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }

        for( List<Integer> el : ar)
        {
            result.add(el);
        }
        return result;
    }
}

16. 3Sum Closest

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int len=nums.length;
        int minsum = nums[0] + nums[1] + nums[2];
        int mindiff = Math.abs(minsum - target);
        Arrays.sort(nums);
        for(int i=0;i< len;i++)
        {
            int j=i+1;
            int k=len-1;
            while(j<len && k>j)
            {
                int sum=nums[i]+nums[j]+nums[k];
                int diff=Math.abs(sum-target);
                if(diff<mindiff)
                {
                    minsum=sum;
                    mindiff=diff;
                    
                }
                if(sum<target)
                {
                    j++;
                }
                else if(sum>target)
                {
                    k--;
                }
                else
                    return sum;

            }
        }
        return minsum;
        
    }
}

33.Search in Rotated Sorted Array

class Solution {

    public int search(int nums[], int target) {
        int len = nums.length;
        if (len == 0)
            return -1;
        int i = 0;
        while (i < len - 1 && nums[i] <= nums[i + 1]) {
            i++;
        }
        int ind = i;
        int low = 0;
        int high = len - 1;

        if (target <= nums[ind]) {
            int result = BinarySearch(nums, low, ind, target);
            return result;
        } else {
            int result = BinarySearch(nums, ind + 1, high, target);
            return result;
        }
    }

    public int BinarySearch(int nums[], int l, int h, int target) {
        if (l > h)
            return -1; // Return -1 when target is not found
        int mid = l+((l + h)) / 2;
        if (nums[mid] == target)
            return mid;
        if(nums[l]<=nums[mid])
        {
            if(target>nums[l] && target< nums[mid])
            {
                return BinarySearch(nums,l,mid-1,target);
            }
            else
                return BinarySearch(nums,mid+1,h,target); 
        }
        else
        {
            if(target>nums[mid] && target<nums[h])
                return BinarySearch(nums,mid+1,h,target);
            else
                return BinarySearch(nums,l,mid-1,target);

        }
        
    }
}

